@page "/login"
@using PEngine.Services

@inject MainLayoutViewModel mvm
@inject UserService service
@inject NavigationManager navManager

<div class="login-wrapper">
    <h1>PEngine Login</h1>

    @if (ErrorSet)
    {
        <div>@Error</div>
    }
    
    <EditForm class="login-option classic-login" Model="_loginModel">
        <h3>With Username/Password</h3>
        <p>Classical way to access into PEngine.</p>
        <label for="usernameInput">Username</label>
        <input type="text" id="usernameInput" placeholder="Username Here..."
               @bind-value="_loginModel.Username" />

        <label for="passwordInput">Password</label>
        <input type="password" id="passwordInput" placeholder="********"
               @bind-value="_loginModel.Password" />

        <button @onclick="HandleClassicAuth"><i class="fas fa-lock"></i> LOGIN</button>
    </EditForm>

    <div class="login-option">
        <h3>With Certificate [in Development]</h3>
        <p>Access with pre-registered X.509 certificate.</p>

        <button><i class="fas fa-certificate"></i> UPLOAD CERTIFICATE</button>
    </div>

    <div class="login-option">
        <h3>With Fingerprint [in Development]</h3>
        <p>Access with Windows Hello based Authentication.</p>

        <button><i class="fas fa-fingerprint"></i> START AUTHENTICATION</button>
    </div>
</div>

@code {
    private LoginRequest _loginModel;

    [Parameter]
    public string? Error { get; set; }
    
    public bool ErrorSet => !string.IsNullOrEmpty(Error);

    public Login()
    {
        _loginModel = new();
    }

    private void HandleClassicAuth()
    {
        mvm.QueueTask(async () =>
        {
            var validState = _loginModel.IsValid();
            
            if (!validState.IsSuccess)
            {
                Error = validState.Message;
                await InvokeAsync(StateHasChanged);

                return;
            }
        
            var user = await service.LoginAsync(_loginModel);

            if (user is null)
            {
                
            }
        });
        
    }

    private void HandlePKIAuth()
    {
        
    }

    private void HandleFIDOAuth()
    {
        
    }

}
