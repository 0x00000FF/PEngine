using System.Text;
using NuGet.Frameworks;
using PEngine.Utilities;

namespace PEngine.NUnit
{
    public class CryptoTest
    {
        private readonly byte[] IV = new byte[]
        {
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18
        };
        
        private readonly byte[] SampleKey = new byte[] { 
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18
        };
        
        private readonly string ASCIIReadableString = " !\"#$%&'()*+,-./0123456789:;<=>?@" +
                                                      "ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" +
                                                      "`abcdefghijklmnopqrstuvwxyz{|}~";
        private readonly byte[] ASCIIReadable;

        public CryptoTest()
        {
            var asciiList = new List<byte>();
            
            for (var i = 0x20; i < 0x7f; ++i)
            {
                asciiList.Add((byte) i);
            }

            ASCIIReadable = asciiList.ToArray();
        }
        
        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void StringToBytesASCII()
        {
            Assert.That(
                ASCIIReadable, 
                Is.EqualTo( ASCIIReadableString.AsBytes() )
            );
            
            Assert.That(
                ASCIIReadableString,
                Is.EqualTo( ASCIIReadable.AsString() )
            );
        }

        [Test]
        public void StringToBytesUTF8()
        {
            var krExampleString = "모든 국민은 헌법과 법률이 정한 법관에 의하여 법률에 의한 재판을 받을 권리를 가진다.";
            var krExampleBytes = new byte[]
            {
                0xeb,0xaa,0xa8,0xeb,0x93,0xa0,0x20,0xea,0xb5,0xad,0xeb,0xaf,0xbc,0xec,0x9d,
                0x80,0x20,0xed,0x97,0x8c,0xeb,0xb2,0x95,0xea,0xb3,0xbc,0x20,0xeb,0xb2,0x95,
                0xeb,0xa5,0xa0,0xec,0x9d,0xb4,0x20,0xec,0xa0,0x95,0xed,0x95,0x9c,0x20,0xeb,
                0xb2,0x95,0xea,0xb4,0x80,0xec,0x97,0x90,0x20,0xec,0x9d,0x98,0xed,0x95,0x98,
                0xec,0x97,0xac,0x20,0xeb,0xb2,0x95,0xeb,0xa5,0xa0,0xec,0x97,0x90,0x20,0xec,
                0x9d,0x98,0xed,0x95,0x9c,0x20,0xec,0x9e,0xac,0xed,0x8c,0x90,0xec,0x9d,0x84,
                0x20,0xeb,0xb0,0x9b,0xec,0x9d,0x84,0x20,0xea,0xb6,0x8c,0xeb,0xa6,0xac,0xeb,
                0xa5,0xbc,0x20,0xea,0xb0,0x80,0xec,0xa7,0x84,0xeb,0x8b,0xa4,0x2e
            };

            Assert.That(
                krExampleBytes,
                Is.EqualTo( krExampleString.AsBytes() )
            );

            Assert.That(
                krExampleString,
                Is.EqualTo( krExampleBytes.AsString() )
            );
            
            var jpExampleString = "皆さんが作るブログエンジーンは公開ソフトウェアーです";
            var jpExampleBytes = new byte[]
            {
                0xe7,0x9a,0x86,0xe3,0x81,0x95,0xe3,0x82,0x93,0xe3,0x81,0x8c,0xe4,0xbd,0x9c,
                0xe3,0x82,0x8b,0xe3,0x83,0x96,0xe3,0x83,0xad,0xe3,0x82,0xb0,0xe3,0x82,0xa8,
                0xe3,0x83,0xb3,0xe3,0x82,0xb8,0xe3,0x83,0xbc,0xe3,0x83,0xb3,0xe3,0x81,0xaf,
                0xe5,0x85,0xac,0xe9,0x96,0x8b,0xe3,0x82,0xbd,0xe3,0x83,0x95,0xe3,0x83,0x88,
                0xe3,0x82,0xa6,0xe3,0x82,0xa7,0xe3,0x82,0xa2,0xe3,0x83,0xbc,0xe3,0x81,0xa7,
                0xe3,0x81,0x99
            };

            Assert.That(
                jpExampleBytes,
                Is.EqualTo( jpExampleString.AsBytes() )
            );
            
            Assert.That(
                jpExampleString,
                Is.EqualTo( jpExampleBytes.AsString() )
            );
        }

        [Test]
        public void Base64()
        {
            var original = Cryptography.Random(128);
            var base64 = original.AsBase64();
            
            Assert.That(
                base64.AsBase64Bytes(),
                Is.EqualTo( original )
            );
        }

        [Test]
        public void SymmetricCipher()
        {
            var plaintext = "Si vis pacem, para bellum.";
            var plaintextBytes = plaintext.AsBytes();
            
            var ciphertext = new byte[] { 0x96,0x3d,0xd6,0xa0,0x73,0x90,0x7e,0x51,0xf6,
                0xc4,0x48,0x90,0x1e,0xda,0xce,0x53,0x19,0xd3,0xb8,0x91,0x11,0x5e,0x5d,
                0x56,0xc1,0xfd,0x9d,0x3a,0xec,0x45,0xe2,0x7a };

        }

        [Test]
        public void AsymmetricCipher()
        {
            var plaintext = "";
            var plaintextBytes = plaintext.AsBytes();

            var ciphertext = new byte[] {  };

            throw new NotImplementedException();
        }

        [Test]
        public void Sign()
        {
            
        }
    }
}